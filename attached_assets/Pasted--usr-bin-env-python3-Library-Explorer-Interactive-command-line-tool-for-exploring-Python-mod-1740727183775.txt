#!/usr/bin/env python3
"""
Library Explorer - Interactive command-line tool for exploring Python modules.

Usage:
    ./library_explorer.py <module_name>

Example:
    ./library_explorer.py numpy
    ./library_explorer.py pandas.DataFrame
"""

import sys
import subprocess
import re
from typing import List, Dict, Any, Union

def run_python_command(command: str) -> str:
    """Execute a Python command and return the output."""
    result = subprocess.run(
        ["python3", "-c", command],
        capture_output=True,
        text=True
    )
    return result.stdout

def get_module_attributes(module_name: str) -> List[str]:
    """Get list of attributes from a module using dir()."""
    command = f"import {module_name}; print(dir({module_name}))"
    output = run_python_command(command)
    
    # Parse the output to extract the list
    match = re.search(r'\[(.*)\]', output, re.DOTALL)
    if not match:
        return []
    
    # Extract items from the list string and clean them
    items_str = match.group(1)
    items = [item.strip('\'" ') for item in items_str.split(',')]
    return [item for item in items if item]  # Remove empty items

def get_help_text(module_name: str, attribute: str = None) -> str:
    """Get help text for a module or specific attribute."""
    if attribute:
        command = f"import {module_name}; help({module_name}.{attribute})"
    else:
        command = f"import {module_name}; help({module_name})"
    
    return run_python_command(command)

def explore_submodule(module_name: str, attribute: str) -> None:
    """Explore a submodule or attribute of the module."""
    full_name = f"{module_name}.{attribute}"
    
    # Try to get attributes (will work if it's a module/class)
    try:
        attributes = get_module_attributes(full_name)
        if attributes:
            display_menu(full_name, attributes)
            return
    except:
        pass
    
    # If not a module, show help
    help_text = get_help_text(module_name, attribute)
    print(help_text)
    input("Press Enter to continue...")

def display_help_in_pages(text: str, lines_per_page: int = 20) -> None:
    """Display help text in pages with user control."""
    lines = text.split('\n')
    total_lines = len(lines)
    current_line = 0
    
    while current_line < total_lines:
        # Display a page of text
        end_line = min(current_line + lines_per_page, total_lines)
        for i in range(current_line, end_line):
            print(lines[i])
        
        current_line = end_line
        
        if current_line >= total_lines:
            break
        
        # Prompt for next page
        response = input("-- More -- (press Enter for more, 'q' to quit): ")
        if response.lower() == 'q':
            break

def display_menu(module_name: str, attributes: List[str]) -> None:
    """Display interactive menu of module attributes."""
    attributes = sorted(attributes)
    
    while True:
        print(f"\n{module_name} - Available attributes:")
        print("=" * 50)
        
        # Display attributes in columns
        for i, attr in enumerate(attributes, 1):
            print(f"{i:3d}. {attr}")
        
        print("\nCommands:")
        print("  h  - Show module help")
        print("  q  - Go back/quit")
        print("  /  - Search attributes")
        print("  ?  - Show this menu")
        
        choice = input("\nEnter number or command: ").strip()
        
        if choice.lower() == 'q':
            return
        elif choice.lower() == 'h':
            help_text = get_help_text(module_name)
            display_help_in_pages(help_text)
        elif choice.lower() == '?':
            continue
        elif choice.lower() == '/':
            search_term = input("Enter search term: ").lower()
            filtered = [attr for attr in attributes if search_term in attr.lower()]
            if filtered:
                print(f"\nMatching attributes for '{search_term}':")
                for i, attr in enumerate(filtered, 1):
                    print(f"{i:3d}. {attr}")
                subchoice = input("\nEnter number or press Enter to continue: ")
                if subchoice.isdigit() and 1 <= int(subchoice) <= len(filtered):
                    explore_submodule(module_name, filtered[int(subchoice) - 1])
            else:
                print(f"No attributes matching '{search_term}'")
                input("Press Enter to continue...")
        elif choice.isdigit():
            idx = int(choice)
            if 1 <= idx <= len(attributes):
                explore_submodule(module_name, attributes[idx - 1])
            else:
                print("Invalid number. Please try again.")
        else:
            print("Invalid choice. Please try again.")

def explore_module_importables(module_name: str) -> None:
    """Show what's available after 'from module import *'"""
    command = f"from {module_name} import *; print(sorted(dir()))"
    output = run_python_command(command)
    
    ...